@top Root {
  node*
}

node {
  Block|Group|Identifier|Keyword|literal|Punctuation
}

Block {
  "{" node* "}"
}

Group {
  "(" node* ")"
}

Punctuation {
  punctuation { "["|"]"|"?."|"!."|"."|","|";"|"=>"} |Assignment|Operator
}

Assignment {
  "=" |
  "*=" | "/=" | "+=" | "-=" | "%=" |
  "^=" | "&=" | "|=" | ">>=" | "<<=" |
  "??="
}

Operator {
  "!" | "~" |
  "*" | "/" | "+" | "-" | "%" |
  "<" | ">" | "==" | "!=" | ">=" | "<=" |
  "^" | "&" | "|" | ">>" | "<<" |
  "&&" | "||" | "??" |
  "?" | ":" |
  "++" | "--"
}

Keyword {
  // order matches Roslyn
  // https://github.com/dotnet/roslyn/blob/2f510ce51a222f618e85a5084683ea41d1a70db2/src/Compilers/CSharp/Portable/Syntax/SyntaxKind.cs#L85
  kw<'bool'> |
  kw<'byte'> |
  kw<'sbyte'> |
  kw<'short'> |
  kw<'ushort'> |
  kw<'int'> |
  kw<'uint'> |
  kw<'long'> |
  kw<'ulong'> |
  kw<'double'> |
  kw<'float'> |
  kw<'decimal'> |
  kw<'string'> |
  kw<'char'> |
  kw<'void'> |
  kw<'null'> |
  kw<'true'> |
  kw<'false'> |
  kw<'if'> |
  kw<'else'> |
  kw<'while'> |
  kw<'for'> |
  kw<'do'> |
  kw<'switch'> |
  kw<'case'> |
  kw<'default'> |
  kw<'break'> |
  kw<'continue'> |
  kw<'return'> |
  kw<'const'> |


  // separate in Roslyn
  kw<'var'> |

  // not a keyword in Roslyn?
  kw<'dynamic'>
}

Identifier {
  identifier
}

literal {
  String|Number|Char
}

Comment {
  lineComment|blockComment
}

kw<term> { @specialize<identifier, term> }

@skip { whitespace | Comment }

@tokens {
  whitespace { std.whitespace+ }

  lineComment { "//" ![\n]* }

  blockComment { "/*" blockCommentRest }

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  @precedence { blockComment, lineComment }
  @precedence { blockComment, "/" }
  @precedence { lineComment, "/" }

  identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  identifier { identifierChar (identifierChar | std.digit)* }

  @precedence { identifier, whitespace }

  Number {
    (std.digit+ ("." std.digit*)? | "." std.digit+) (("e" | "E") ("+" | "-")? std.digit+)? |
    "0x" (std.digit | $[a-fA-F])+ |
    "0b" $[01]+
  }

  @precedence { Number, "." }

  String {
    '"' (![\\\n"] | "\\" ![\n])* '"'?
  }

  Char {
    "'" (![\\\n'] | "\\" ![\n]) "'"?
  }

  "{"[@name=Punctuation]
  "}"[@name=Punctuation]
  "("[@name=Punctuation]
  ")"[@name=Punctuation]
}

@detectDelim